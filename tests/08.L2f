(spill
 (:go
  (:fill_mult
   2 1	;; first is size, second is factor decoded
   ;;make array
   ((mem rsp 0) <- rsi)
   (rsi <- 1)
   (call allocate 2)

   ;;initialize counters
   (rdi <- rax)
   (rdi += 8)
   (rcx <- (mem rax 0))
   (rdx <- rcx)
   (r8 <- (mem rsp 0))

   :loop
   (cjump rcx = 0 :done :more)

   :more
   (rsi <- rdx)
   (rsi -= rcx)
   (rsi *= r8)
   (rsi *= 2)
   (rsi += 1)
   ((mem rdi 0) <- rsi)
   (rcx -= 1)
   (rdi += 8)
(goto :loop)

   :done
   (return))

   (:concat
	2 2 ;; first two args used for arr pointers
	;; calc new arr size
	(arr1size <- (mem rdi 0))
	(arr2size <- (mem rsi 0))
	(arr1size += arr2size)
	((mem rsp 0) <- rdi)
	((mem rsp 8) <- rsi)

	;; allocate new array
	(rdi <- arr1size)
	(rdi <<= 1)
	(rdi += 1)
	(rsi <- 1)
	(call allocate 2)
	(rdi <- rax)

	(rsi <- (mem rsp 0))
	(rcx <- (mem rsi 0))
	(rdi += 8)
	(rsi += 8)

   :concat_loop1
(cjump rcx = 0 :concat_done1 :concat_more1)

   :concat_more1
   (rdx <- (mem rsi 0))
   ((mem rdi 0) <- rdx)
   (rcx -= 1)
   (rdi += 8)
   (rsi += 8)
(goto :concat_loop1)

   :concat_done1
   (rsi <- (mem rsp 8))
   (rcx <- (mem rsi 0))
(rsi += 8)

   :concat_loop2
(cjump rcx = 0 :concat_done2 :concat_more2)

   :concat_more2
   (rdx <- (mem rsi 0))
   ((mem rdi 0) <- rdx)
   (rcx -= 1)
   (rdi += 8)
   (rsi += 8)
(goto :concat_loop2)

   :concat_done2
(return))

   (:go
	0 0
	(tail-call :test 0)

	(return))
   (:test
	0 1
	((mem rsp 0) <- rbx)
	;; gen first array
	(rdi <- 13)
	(rsi <- 7)
	((mem rsp -8) <- :fill_ret1)
	(call :fill_mult 2)

	:fill_ret1
	(rbx <- rax)

	;; gen second array
	(rdi <- 7)
	(rsi <- 4)
	((mem rsp -8) <- :fill_ret2)
	(call :fill_mult 2)

	:fill_ret2
	(rdi <- rbx)
	(rsi <- rax)
   ((mem rsp -8) <- :concat_ret)
(call :concat 2)
   :concat_ret

   (rdi <- rax)
   (call print 1)
(rbx <- (mem rsp 0))
(return)))
   'arr1size
   's)
